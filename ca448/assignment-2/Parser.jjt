// Alan Kehoe 10735389

options{
	JAVA_UNICODE_ESCAPE = true;
	IGNORE_CASE = true;
	STATIC = false;
	DEBUG_PARSER=true;
}

PARSER_BEGIN(Parser)

public class Parser {
	public static void main(String [] args) throws ParseException, java.io.FileNotFoundException {
		Parser parser = new Parser(new java.io.FileInputStream(args[0]));
		SimpleNode root = parser.program();
		root.dump("");
	}		
}

PARSER_END(Parser)

TOKEN_MGR_DECLS : {
	static int commentNesting = 0;
}

SKIP : {
	" "
	| "\t"
	| "\n"
	| "\r"
	| "\f"
	| < "//" (~["\n"])* "\n" >
}

SKIP : {
	"/-" { commentNesting++; } : IN_COMMENT
}

<IN_COMMENT> SKIP : {
	"/-" { commentNesting++; }
	| "-/" { commentNesting--;
		if (commentNesting == 0)
			SwitchTo(DEFAULT);
	}
	| <~[]>
}

TOKEN : {
    < SEMIC : ";" >
    | < COLON : ":" >
    | < ASSIGN : ":=" >
    | < LBR : "(" >
    | < RBR : ")" >
    | < COMMA : "," >
    | < PLUS_SIGN : "+" >
    | < MINUS_SIGN : "-" >
    | < MULT_SIGN : "*" >
    | < DIV_SIGN : "/" >
    | < RCBR : "}" > 
    | < LCBR : "{" >
    | < EXLM : "!" >
    | < QUESTION : "?" >
    | < PERCENT : "%" >
    | < EQUALS : "=" > 
    | < NOT_EQUAL : "!=" >
    | < LEFT_BRACE : "<" >
    | < RIGHT_BRACE : ">" >
    | < LEFT_BRACE_EQUAL : "<=" >
    | < RIGHT_BRACE_EQUAL : ">=" >
    | < DOT : "." >
}

TOKEN : {
    < AND : "and" >
    | < BEGIN : "begin" >
    | < BOOLEAN : "boolean" >
    | < CONST : "const" >
    | < DO : "do" >
    | < ELSE : "else" > 
    | < END : "end" >
    | < FALSE : "false" >
    | < IF : "if" >
    | < INTEGER : "integer" >
	| < MAIN : "main" >
    | < NOT : "not" >
    | < OR : "or" >
    | < PROGRAM : "program" >
    | < REAL : "real" >
    | < RETURN : "return" >
    | < STRING : "string" >
    | < THEN : "then" >
    | < TRUE : "true" >
    | < VAR : "var" >
    | < VOID : "void" >
    | < WHILE : "while" > 
}

TOKEN : {
	< NUM : (<DIGIT>)+ | (<DIGIT>)+"."(<DIGIT>)+ >
	| < #DIGIT : ["0" - "9"] >
	| < ID : (<DIGIT> | <LETTER> | <UNDERSCORE>)* >
	| < #LETTER : ["a" - "z", "A" - "Z"] >
	| < #UNDERSCORE : ("_") >
	| < #ESCAPE_ARTIST : ("\\" ("\"")) >
}

TOKEN : {
	< USER_STRING :  "\"" (<DIGIT> | " " | <ESCAPE_ARTIST> | <LETTER>)*  "\"" >
}

TOKEN : {
	< FAIL : ~[] >
}


//Grammar starts here

SimpleNode program(): {}{
	((decl())*(function())*(main_prog())) <EOF>{return jjtThis;}
}

void decl() : {}{
	(var_decl() | const_decl())
}

void var_decl () : {}{
	<VAR>ident_list()<COLON>type()(<COMMA>ident_list()<COLON>type())*<SEMIC>
}

void const_decl() : {}{
	<CONST><ID><COLON>type()<EQUALS>expression()(<COMMA><ID><COLON>type()<EQUALS>expression())*<SEMIC>
}

void function () :{} {
	type()<ID><LBR>param_list()<RBR>(decl())*(statement()<SEMIC>)*
	<RETURN>expression() | {}<SEMIC>
}
void param_list () :{} {
	(<ID><COLON>type()(<COMMA><ID><COLON>type())* | {})
}

void type () :{}{
	<INTEGER>|<BOOLEAN>|<REAL>|<STRING>|<VOID>
}

void main_prog() :{} {
	<MAIN>(decl())*(statement()<SEMIC>)*
}

void statement () :{}{
	<ID>(assignment() | <LBR>arg_list()<RBR>)
    |<EXLM>expression()
    |<QUESTION><ID>
	|<IF>condition()<THEN>statement() (<ELSE>statement() | {})
    |<WHILE><LBR>condition()<RBR><DO>statement()
    |{}
}

void assignment (): {}{
	<ASSIGN>(expression() | <STRING>)
}

void expression(): {}{
	term()((<PLUS_SIGN>|<MINUS_SIGN>)term())*
}

void term(): {}{
	fragment()((<MULT_SIGN>|<DIV_SIGN>) fragment())*
}

void fragment() :{}{
	<ID>|<NUM> |(<PLUS_SIGN>|<MINUS_SIGN>) fragment()
}

void condition() :{}{
	<NOT>expression()
	|expression()(<EQUALS>|<NOT_EQUAL>|<LEFT_BRACE>|<RIGHT_BRACE>|<LEFT_BRACE_EQUAL>|<RIGHT_BRACE_EQUAL>|<AND>|<OR>)
}

void ident_list () :{}{
	<ID>(<COMMA><ID>)*
}

void arg_list():{}{
	(<ID>(<COMMA><ID>)* | {})
}
